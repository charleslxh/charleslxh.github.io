<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>互联网那些事儿</title>
  <subtitle>博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.charleslxh.com/"/>
  <updated>2017-06-03T05:22:15.000Z</updated>
  <id>http://blog.charleslxh.com/</id>
  
  <author>
    <name>Charles Liao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>正则表达式 - 回溯</title>
    <link href="http://blog.charleslxh.com/2017/06/03/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F-%E5%9B%9E%E6%BA%AF/"/>
    <id>http://blog.charleslxh.com/2017/06/03/正则表达式-回溯/</id>
    <published>2017-06-03T02:34:53.000Z</published>
    <updated>2017-06-03T05:22:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>在正则表达式实现中，回溯是匹配过程的基本组成部分，它是正则表达式如此好用和强大的根源。然而，回溯计算代价很高，如果设计失误，将导致失控。回溯是影响整体性能的唯一因素，理解它的工作原理，以及如何减小使用频率，可能是编写高效正则表达式的关键点。</p>
<a id="more"></a>
<h2 id="匹配原理"><a class="header-anchor" href="#匹配原理">¶</a>匹配原理</h2>
<p>当一个正则表达式扫描目标字符串时，从左到右逐个扫描正则表达式的组成部分，在每个位置上测试能不能找到一个匹配。对于每一个量词和分支，都必须确定如何继续进行。如果是一个量词（如 <code>*</code>、<code>+</code>、<code>?</code>或者 <code>{2,}</code>），那么正则表达式必须确定何时尝试匹配更多的字符；如果遇到分支（通过|操作符），那么正则表达式必须从这些选项中选择一个进行尝试。</p>
<p>当正则表达式做出这样的决定时，如果有必要，它会记住另一个选项，以备返回后使用。如果所选方案匹配成功，正则表达式将继续扫描正则表达式模板，如果其余部分匹配也成功了，那么匹配就结束了。但是，如果所选择的方案未能发现相应匹配，或者后来的匹配也失败了，正则表达式将回溯到最后一个决策点，然后在剩余的选项中选择一个。继续这样，直到找到一个匹配，或者量词和分支选项的所有可能的排列组合都尝试失败后放弃这一过程，然后移动到此过程开始位置的下一个字符上，重复此过程。</p>
<p>例如，下面的代码演示了这一过程是如何通过回溯处理分支的。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/h(ello|appy) hippo/.test(<span class="string">"hello there, happy hippo"</span>);</div></pre></td></tr></table></figure>
<p>上面一行正则表达式用于匹配 <code>hello hippo</code> 或 <code>happy hippo</code>。测试一开始要查找一个 <code>h</code>，目标字符串的第一个字母恰好就是 <code>h</code>，立刻就找到了。接下来，子表达式<code>（ello|appy）</code>提供了两个处理选项。正则表达式选择最左边的选项（<strong>分支选择总是从左到右进行</strong>），检查 <code>ello</code> 是否匹配字符串的下一个字符，确实匹配，然后正则表达式又匹配了后面的空格。</p>
<p>然而，在接下来的匹配中正则表达式“走进了死胡同”，因为 <code>hippo</code> 中的 <code>h</code> 不能匹配字符串中的下一个字母 <code>t</code>。此时正则表达式还不能放弃，因为它还没有尝试过所有的选择，随后它回溯到最后一个检查点（在匹配了首字母h 之后的那个位置上）并尝试匹配第二个分支选项。但由于匹配没有成功，而且也没有更多的选项了，正则表达式认为从字符串的第一个字符开始匹配是不能成功的，因此它从第二个字符开始重新进行查找。正则表达式没有找到h，继续向后找，直到第 <code>14</code> 个字母才找到，它匹配 <code>happy</code> 的那个 <code>h</code>。随后正则表达式再次进入分支过程，这次 <code>ello</code> 未能匹配，但在回溯之后的第二次分支中，它匹配了整个字符串 <code>happy hippo</code>，匹配成功了。</p>
<p>再如，下面代码演示了带重复量词的回溯。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">"&lt;p&gt;Para 1.&lt;/p&gt;"</span> +<span class="string">"&lt;img src='smiley.jpg'&gt;"</span> +<span class="string">"&lt;p&gt;Para 2.&lt;/p&gt;"</span> +<span class="string">"&lt;div&gt;Div.&lt;/div&gt;"</span>;  </div><div class="line"><span class="regexp">/&lt;p&gt;.*&lt;\/p&gt;/i</span>.test(str);</div></pre></td></tr></table></figure>
<p>正则表达式先匹配了字符串开始的 3 个字母 <code>&lt;p&gt;</code>，然后是 <code>.*</code>。点号表示匹配除换行符以外的任意字符，星号这个 <strong>贪性量词</strong>(表示重复零次或多次)，匹配尽量多的次数。因为目标字符串中没有换行符，正则表达式将匹配剩下的全部字符串！不过由于正则表达式模板中还有更多内容需要匹配，所以正则表达式尝试匹配 <code>&lt;</code> 。由于在字符串末尾匹配不成功，因此每次回溯一个字符，继续尝试匹配&lt;，直到正则表达式回到 <code>&lt;/div&gt;</code> 标签的 <code>&lt;</code> 位置。接下来尝试匹配 <code>\/</code>（转义反斜杠），匹配成功，然后匹配 <code>p</code>，匹配不成功。正则表达式继续回溯，重复此过程，直到第二段末尾时终于匹配了 <code>&lt;/p&gt;</code>。匹配返回成功需要从第一段头部一直扫描到最后一个的末尾，这可能不是我们想要的结果。</p>
<p>将正则表达式中的 <code>贪性量词</code> 改为 <code>惰性量词</code>（详细请查看<a href="/2017/06/03/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F-%E8%B4%AA%E6%80%A7%E4%B8%8E%E6%83%B0%E6%80%A7/#%E6%83%B0%E6%80%A7%E5%8C%B9%E9%85%8D-laziness">如何设置量词为惰性</a>），以匹配单个段落。<code>惰性量词</code>的回溯工作以相反方式进行。当正则表达式 <code>/&lt;p&gt;.*?&lt;\/p&gt;/</code> 推进到 <code>.*?</code> 时，首先尝试全部跳过，然后继续匹配 <code>&lt;\/p&gt;</code>。</p>
<p>这样做是因为 <code>*?</code> 匹配零次或多次，尽可能少重复，尽可能少意味着可以重复零次。但是，当随后的 <code>&lt;</code> 在字符串的这一点上匹配失败时，正则表达式回溯并尝试下一个最小的字符数：1 个。正则表达式继续像这样向前回溯到第一段的末尾，在那里量词后面的 <code>&lt;\/p&gt;</code> 得到完全匹配。</p>
<p>如果目标字符串只有一个段落，那么此正则表达式的 <code>贪性匹配</code> 和 <code>惰性匹配</code> 是等价的，但尝试匹配的过程不同。</p>
<p>当一个正则表达式占用浏览器几秒甚至更长时间时，问题原因很可能是回溯失控。为说明此问题，给出下面的正则表达式，它的目标是匹配整个 <code>HTML</code> 文件。此表达式被拆分成多行是为了适合页面显示。与其他正则表达式不同，<code>JavaScript</code> 在没有选项时可使点号匹配任意字符，包括换行符，所以此例中以 <code>[\s\S]</code> 匹配任意字符。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/&lt;html&gt;[\s\S]*?&lt;head&gt;[\s\S]*?&lt;title&gt;[\s\S]*?&lt;\/title&gt;[\s\S]*?&lt;\/head&gt; </div><div class="line">[\s\S]*?&lt;body&gt;[\s\S]*?&lt;\/body&gt;[\s\S]*?&lt;\/html&gt;<span class="regexp">/</span></div></pre></td></tr></table></figure>
<h2 id="总结"><a class="header-anchor" href="#总结">¶</a>总结</h2>
<p>回溯会大大降低我们正则表达式的执行效率与时间，所以我们需要尽量减少回溯的次数，这需要我们更加仔细的考虑每一个正则表达式。</p>
<h2 id="参考连接"><a class="header-anchor" href="#参考连接">¶</a>参考连接</h2>
<p><a href="http://www.regular-expressions.info/backref.html" target="_blank" rel="external">Backreferences</a><br>
<a href="https://loveky.github.io/2017/05/31/regular-expressions-catastrophic-backtracking" target="_blank" rel="external">正则表达式中的悲观回溯</a><br>
<a href="http://www.regular-expressions.info/catastrophic.html" target="_blank" rel="external">Runaway Regular Expressions: Catastrophic Backtracking</a><br>
<a href="http://www.regular-expressions.info/possessive.html" target="_blank" rel="external">Regex Tutorial - Possessive Quantifiers</a><br>
<a href="http://www.regular-expressions.info/atomic.html" target="_blank" rel="external">Regex Tutorial - Atomic Grouping</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在正则表达式实现中，回溯是匹配过程的基本组成部分，它是正则表达式如此好用和强大的根源。然而，回溯计算代价很高，如果设计失误，将导致失控。回溯是影响整体性能的唯一因素，理解它的工作原理，以及如何减小使用频率，可能是编写高效正则表达式的关键点。&lt;/p&gt;
    
    </summary>
    
      <category term="正则表达式" scheme="http://blog.charleslxh.com/categories/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
    
      <category term="正则表达式" scheme="http://blog.charleslxh.com/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式 - 贪性与惰性</title>
    <link href="http://blog.charleslxh.com/2017/06/03/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F-%E8%B4%AA%E6%80%A7%E4%B8%8E%E6%83%B0%E6%80%A7/"/>
    <id>http://blog.charleslxh.com/2017/06/03/正则表达式-贪性与惰性/</id>
    <published>2017-06-03T01:57:39.000Z</published>
    <updated>2017-06-03T05:20:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用正则表达式中的 <code>贪性</code>、<code>惰性</code>、<code>支配性</code> 的量词可以控制表达式匹配过程，我们知道量词 <code>？</code>、<code>*</code>、<code>+</code> 的意义，可以指定相关模式出现的次数，默认的情况下我们使用的量词均是是贪婪量词，它的匹配过程是从整个字符串开始查看，如果不匹配就去掉最后一个，再看看是否匹配，如此循环一直到匹配或字符串空为止。不管是 <code>贪性</code> 还是 <code>惰性</code> ，在正则表达式在匹配失败时都会触发 <code>正则表达式回溯</code>（详情查看<a href="/2017/06/03/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F-%E5%9B%9E%E6%BA%AF/">正则表达式 - 回溯</a>），从而影响其性能。</p>
<a id="more"></a>
<h2 id="量词-quantifier"><a class="header-anchor" href="#量词-quantifier">¶</a>量词（Quantifier）</h2>
<p>首先，我们需要了解一下正则表达式的量词，正则表达式中有如下几种量词 <code>?</code>、<code>+</code>、<code>*</code>、<code>{n}</code>、<code>{n,m}</code>、<code>{n,}</code>。</p>
<table>
<thead>
<tr>
<th style="text-align:center">量词</th>
<th style="text-align:center">匹配规则</th>
<th style="text-align:center">例子</th>
<th style="text-align:center">结果</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">?</td>
<td style="text-align:center">匹配出现 0 次或 1 次</td>
<td style="text-align:center">/a?/.test(‘abcd’);</td>
<td style="text-align:center">true</td>
</tr>
<tr>
<td style="text-align:center">+</td>
<td style="text-align:center">匹配出现 1 次或多次</td>
<td style="text-align:center">/a+/.test(‘aaaaaaaa’);</td>
<td style="text-align:center">true</td>
</tr>
<tr>
<td style="text-align:center">*</td>
<td style="text-align:center">匹配出现 0 次或 1 次或多次</td>
<td style="text-align:center">/a*/.test(‘bbbbb’);</td>
<td style="text-align:center">true</td>
</tr>
<tr>
<td style="text-align:center">{n}</td>
<td style="text-align:center">匹配刚好出现 n 次</td>
<td style="text-align:center">/a{5}/.test(‘aaaab’);</td>
<td style="text-align:center">false</td>
</tr>
<tr>
<td style="text-align:center">{n,m}</td>
<td style="text-align:center">匹配最少出现 n 次最多出现 m 次</td>
<td style="text-align:center">a{1,3}/.test(‘aaabbb’);</td>
<td style="text-align:center">true</td>
</tr>
<tr>
<td style="text-align:center">{n,}</td>
<td style="text-align:center">匹配最少出现 n 次</td>
<td style="text-align:center">/a{3,}/.test(‘aabbb’);</td>
<td style="text-align:center">false</td>
</tr>
</tbody>
</table>
<h2 id="贪性匹配-greediness"><a class="header-anchor" href="#贪性匹配-greediness">¶</a>贪性匹配（greediness）</h2>
<p>从字面意思我们就可以知道，所谓的&quot;贪婪&quot;的意思就是，如果符合要求就一直往后匹配，一直到无法匹配为止，这就是贪性匹配。默认情况下，<code>?</code>、<code>+</code>、<code>*</code>、<code>{n}</code>、<code>{n,m}</code>、<code>{n,}</code>都是贪婪的，也就是说，它会根据前导字符去匹配尽可能多的内容。</p>
<blockquote>
<p>贪性匹配就是匹配尽可能 <code>多</code> 的内容。</p>
</blockquote>
<p>假如我们有一个字符串 <code>This is a &lt;EM&gt;first&lt;/EM&gt; test</code>，我们使用 <code>/&lt;.+&gt;/g</code> 来匹配，我们期望匹配到两段文本，第一段为 <code>&lt;EM&gt;</code>，第二段匹配文本为 <code>&lt;/EM&gt;</code>，但是只得到了一段匹配文本：<code>&lt;EM&gt;first&lt;/EM&gt;</code>，很显然结果不尽人意，并不是我们想要的。</p>
<p>出现这种情况的罪魁祸首就是 <code>+</code> 是 <code>贪性匹配（greedy）</code> 的，正则表达式引擎执行 <code>+</code> 量词时尽可能的重复匹配前面的符号 <code>.</code>  <code>回溯</code>（即：正则表达式放弃上一次匹配，吐出一个匹配的字符给剩下的字符串），再一次使用下一个正则表达式符号来匹配剩下的字符串，如此反复 <code>回溯</code> 直到匹配成功或回溯到 0。通过下面的例子，可以更加直观的解释他的过程。</p>
<p><code>&lt;.+&gt;</code> 匹配字符串 <code>This is a &lt;EM&gt;first&lt;/EM&gt; test</code> 的过程：</p>
<ol>
<li>第一个符号为 <code>&lt;</code>，所以它将会匹配到字符串中的第一个 <code>&lt;</code> 字符。</li>
<li>第二个符号为 <code>.</code>，匹配任意字符（除了换行），使用 <code>+</code> 重复匹配，所以它将会不断重复匹配，直到他匹配到句尾，则匹配失败，<code>.+</code> 匹配了 <code>EM&gt;first&lt;/EM&gt; test</code>。</li>
<li>到目前为止 <code>&lt;.+</code> 匹配的字符串为：<code>&lt;EM&gt;first&lt;/EM&gt; test</code>。</li>
<li>正则表达式引擎开始对下一个正则表达式符号 <code>&gt;</code> 进行匹配，但字符串还未匹配的只剩下换行符了，于是匹配失败。</li>
<li>由于第三个符号 <code>&gt;</code> 匹配失败，正则表达式引擎回溯，回溯会使 <code>.+</code> <code>减少（吐出）</code>一个字符，回溯后的匹配状况是 <code>.+</code> 匹配 <code>EM&gt;first&lt;/EM&gt; tes</code>。</li>
<li>正则表达式引擎使用符号 <code>&gt;</code> 匹配 <code>t</code>，结果依然不匹配。</li>
<li>如果重复 <code>5</code>、<code>6</code> 两步，直到 <code>.+</code> 匹配 <code>EM&gt;first&lt;/EM</code> 时，正则表达式使用符号 <code>&gt;</code> 匹配 <code>&gt; test</code>，匹配成功。</li>
<li>正则表达式引擎报告 <code>&lt;EM&gt;first&lt;/EM&gt;</code> 就是匹配上的文本。</li>
</ol>
<h2 id="可选性-optional"><a class="header-anchor" href="#可选性-optional">¶</a>可选性（optional）</h2>
<p>我们都知道量词 <code>?</code> 可以使前一个正则表达式字符是可选的，如：<code>colou?r</code> 可以匹配 <code>colour</code> 和 <code>color</code>。当然你也可以使用括号 <code>()</code> 将一些字符或规则标识为可选的，如：Nov(ember)? 将会匹配 <code>Nov</code> 和 <code>November</code>，当然你也可以使用 <code>{0,1}</code> 拉替代 <code>?</code>，他们是等价的。</p>
<p>默认情况下 <code>?</code> 也是 <code>贪性匹配</code> 的，即：他会优先尝试匹配该字符存在的情况，如果匹配失败，则尝试匹配该字符不存在的情况。例如：<br>
我们用 <code>Feb 23(rd)?</code> 表达式匹配 <code>Today is Feb 23rd, 2003</code> 文本，匹配结果是 <code>Feb 23rd</code> 而不是 <code>Feb 23</code>。</p>
<p>如果是：<code>Feb 23(rd)??</code> 呢？结果却是 <code>Feb 23</code>，是不是很奇妙，下面我们将会详细解答惰性匹配的原理。</p>
<h2 id="惰性匹配-laziness"><a class="header-anchor" href="#惰性匹配-laziness">¶</a>惰性匹配（laziness）</h2>
<p>惰性模式就是一旦匹配到合适的就结束，不在继续匹配下去了，在重复量词后面添加问号 <code>?</code> 即可形成惰性匹配。惰性匹配会尽可能少的匹配字符，但是必须要满足整个匹配模式。</p>
<blockquote>
<p>惰性匹配就是匹配尽可能 <code>少</code> 的内容。</p>
</blockquote>
<table>
<thead>
<tr>
<th style="text-align:center">量词</th>
<th style="text-align:center">匹配规则</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">??</td>
<td style="text-align:center">匹配出现 0 次或 1 次，优先匹配 0 次</td>
</tr>
<tr>
<td style="text-align:center">+?</td>
<td style="text-align:center">匹配出现 1 次或多次，尽可能重复少的次数，不过最少次数是 1</td>
</tr>
<tr>
<td style="text-align:center">*?</td>
<td style="text-align:center">匹配出现 0 次或 1 次或多次，尽可能重复少的次数</td>
</tr>
<tr>
<td style="text-align:center">{n}?</td>
<td style="text-align:center">匹配刚好出现 n 次</td>
</tr>
<tr>
<td style="text-align:center">{n,m}?</td>
<td style="text-align:center">匹配最少出现 n 次最多出现 m 次，尽可能重复少的次数，不过最少次数是 n</td>
</tr>
<tr>
<td style="text-align:center">{n,}?</td>
<td style="text-align:center">匹配最少出现 n 次，尽可能重复少的次数，不过最少次数是 n</td>
</tr>
</tbody>
</table>
<p><code>&lt;.+?&gt;</code> 匹配字符串 <code>This is a &lt;EM&gt;first&lt;/EM&gt; test</code> 的过程：</p>
<ol>
<li>第一个符号为 <code>&lt;</code>，所以它将会匹配到字符串中的第一个 <code>&lt;</code> 字符。</li>
<li>第二个符号为 <code>.</code>，匹配任意字符（除了换行），使用 <code>+?</code> 重复匹配，因为是惰性匹配，所以 <code>+</code> 会尽可能少的匹配（最少一次），第一次 <code>.+</code> 匹配了 <code>E</code>。</li>
<li>正则表达式引擎开始对下一个正则表达式符号 <code>&gt;</code> 进行匹配，剩下的字符串 <code>M&gt;first&lt;/EM&gt; test</code> 的第一个字符为 <code>M</code>，于是匹配失败。</li>
<li>由于第三个符号 <code>&gt;</code> 匹配失败，正则表达式引擎回溯，回溯会使 <code>.+</code> <code>扩大（吞入）</code>一个字符，而不是贪性匹配的<code>减少</code>一个字符，回溯后的匹配状况是 <code>.+</code> 匹配 <code>EM</code>。</li>
<li>正则表达式引擎开始对下一个正则表达式符号 <code>&gt;</code> 进行匹配，剩下的字符串 <code>&gt;first&lt;/EM&gt; test</code> 的第一个字符为 <code>&gt;</code>，于是匹配成功。</li>
<li>正则表达式引擎报告 <code>&lt;EM&gt;</code> 就是匹配上的文本。</li>
</ol>
<h2 id="总结"><a class="header-anchor" href="#总结">¶</a>总结</h2>
<p>贪性匹配，正则引擎会一直匹配到字符串最后；当匹配为 <code>false</code> 时，就回溯以找到倒数第一个匹配位置，返回匹配结果。</p>
<p>惰性匹配，正则引擎会匹配到符合 <code>pattern</code> 的末尾位置那个字符，然后再往后走一步，发现匹配为 <code>false</code> 时，就回溯以找到最近一个匹配为 <code>true</code> 的位置，返回匹配结果。</p>
<p>改善 <code>贪性</code>、<code>惰性</code>，减少回溯次数，能够有利于正则表达式的执行效率，写出更好的正则表达式。</p>
<p>如我们可以使用 <code>&lt;[^&gt;]+&gt;</code> 来取代 <code>&lt;.+?&gt;</code> 和 <code>&lt;.+&gt;</code>，这样回溯次数就降到了 <code>0</code> 次，当然，效率和耗时都是最佳的。</p>
<h2 id="参考连接"><a class="header-anchor" href="#参考连接">¶</a>参考连接</h2>
<p><a href="http://www.regular-expressions.info/optional.html" target="_blank" rel="external">Optional Items</a><br>
<a href="http://www.regular-expressions.info/repeat.html" target="_blank" rel="external">Repetition with Star and Plus</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用正则表达式中的 &lt;code&gt;贪性&lt;/code&gt;、&lt;code&gt;惰性&lt;/code&gt;、&lt;code&gt;支配性&lt;/code&gt; 的量词可以控制表达式匹配过程，我们知道量词 &lt;code&gt;？&lt;/code&gt;、&lt;code&gt;*&lt;/code&gt;、&lt;code&gt;+&lt;/code&gt; 的意义，可以指定相关模式出现的次数，默认的情况下我们使用的量词均是是贪婪量词，它的匹配过程是从整个字符串开始查看，如果不匹配就去掉最后一个，再看看是否匹配，如此循环一直到匹配或字符串空为止。不管是 &lt;code&gt;贪性&lt;/code&gt; 还是 &lt;code&gt;惰性&lt;/code&gt; ，在正则表达式在匹配失败时都会触发 &lt;code&gt;正则表达式回溯&lt;/code&gt;（详情查看&lt;a href=&quot;/2017/06/03/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F-%E5%9B%9E%E6%BA%AF/&quot;&gt;正则表达式 - 回溯&lt;/a&gt;），从而影响其性能。&lt;/p&gt;
    
    </summary>
    
      <category term="正则表达式" scheme="http://blog.charleslxh.com/categories/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
    
      <category term="正则表达式" scheme="http://blog.charleslxh.com/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Java 线程安全与非线程安全</title>
    <link href="http://blog.charleslxh.com/2017/05/27/java-%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E4%B8%8E%E9%9D%9E%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8/"/>
    <id>http://blog.charleslxh.com/2017/05/27/java-线程安全与非线程安全/</id>
    <published>2017-05-27T09:17:05.000Z</published>
    <updated>2017-06-03T03:11:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>还记得初学 Java 的时候，老师是这样告诉我们的：ArrayList 是非线程安全的，Vector 是线程安全的；HashMap 是非线程安全的，HashTable 是线程安全的；StringBuilder 是非线程安全的，StringBuffer 是线程安全的。对，很快我们也记住了这一面试宝典，但是当面试官继续往下问你：什么是线程安全和非线程安全？他们有什么区别？什么场景用哪一种模式？这时，你是不是会吐上一口老血。</p>
<a id="more"></a>
<h2 id="原子性"><a class="header-anchor" href="#原子性">¶</a>原子性</h2>
<p>首先，我们吸纳来了解一下什么是原子性，这个概念大家或许耳熟能详。</p>
<p>在多线程访问共享资源（同一块内存），能保证在同一时间，只有一个进程访问该资源，并且该操作不可被分割，不能被打断，必须执行到结束，不会被线程切换打断，这就是原子性。</p>
<p>这个在 Java 多线程编程中是老生常谈的话题了，所谓的原子操作是指不会被线程调度机制打断的操作，这种操作从执行开始就会一直执行结束，中间不会出现任何的 context switch（线程的切换）。</p>
<h2 id="线程安全与非线程安全"><a class="header-anchor" href="#线程安全与非线程安全">¶</a>线程安全与非线程安全</h2>
<p>那到底什么是线程安全呢，其实线程安全就是一个原子操作，大致是：当一个线程调用一个线程安全的方法时，其他的线程就不能调用该线程安全的方法了，而必须要等到正在执行的线程结束后才能调用。</p>
<p>其实也是线程同步的问题，若是每个线程对共享内存都做只读操作，而无写操作，那么这块共享内存是线程安全，若是有多个线程会同时进行写操作，这时候就需要考虑线程同步的问题了，这就涉及到了线程安全之间问题。</p>
<h2 id="线程安全模拟"><a class="header-anchor" href="#线程安全模拟">¶</a>线程安全模拟</h2>
<p>首先，我们用 <code>ArrayList</code> 来演示非线程安全，我们在主线程有一个 <code>ArrayList</code>，在主线程开启四个子线程分别往这个列表中插入值，</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;还记得初学 Java 的时候，老师是这样告诉我们的：ArrayList 是非线程安全的，Vector 是线程安全的；HashMap 是非线程安全的，HashTable 是线程安全的；StringBuilder 是非线程安全的，StringBuffer 是线程安全的。对，很快我们也记住了这一面试宝典，但是当面试官继续往下问你：什么是线程安全和非线程安全？他们有什么区别？什么场景用哪一种模式？这时，你是不是会吐上一口老血。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://blog.charleslxh.com/categories/java/"/>
    
    
      <category term="Java" scheme="http://blog.charleslxh.com/tags/java/"/>
    
      <category term="线程" scheme="http://blog.charleslxh.com/tags/%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>搜索引擎 ElasticSearch - 使用 Docker 搭建 ELK 系统</title>
    <link href="http://blog.charleslxh.com/2017/05/27/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E-elasticsearch-%E4%BD%BF%E7%94%A8-docker-%E6%90%AD%E5%BB%BA-elk-%E7%B3%BB%E7%BB%9F/"/>
    <id>http://blog.charleslxh.com/2017/05/27/搜索引擎-elasticsearch-使用-docker-搭建-elk-系统/</id>
    <published>2017-05-27T06:03:24.000Z</published>
    <updated>2017-05-27T10:21:58.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="ElasticSearch" scheme="http://blog.charleslxh.com/categories/elasticsearch/"/>
    
      <category term="Docker" scheme="http://blog.charleslxh.com/categories/elasticsearch/docker/"/>
    
    
      <category term="搜索引擎" scheme="http://blog.charleslxh.com/tags/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/"/>
    
      <category term="ElasticSearch" scheme="http://blog.charleslxh.com/tags/elasticsearch/"/>
    
      <category term="ELK" scheme="http://blog.charleslxh.com/tags/elk/"/>
    
      <category term="LogStash" scheme="http://blog.charleslxh.com/tags/logstash/"/>
    
      <category term="Kibana" scheme="http://blog.charleslxh.com/tags/kibana/"/>
    
      <category term="Docker" scheme="http://blog.charleslxh.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>搜索引擎 ElasticSearch - 使用 IK 中文分词插件</title>
    <link href="http://blog.charleslxh.com/2017/05/27/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E-elasticsearch-%E4%BD%BF%E7%94%A8-ik-%E4%B8%AD%E6%96%87%E5%88%86%E8%AF%8D%E6%8F%92%E4%BB%B6/"/>
    <id>http://blog.charleslxh.com/2017/05/27/搜索引擎-elasticsearch-使用-ik-中文分词插件/</id>
    <published>2017-05-27T06:03:13.000Z</published>
    <updated>2017-05-27T10:20:08.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="ElasticSearch" scheme="http://blog.charleslxh.com/categories/elasticsearch/"/>
    
      <category term="NLP" scheme="http://blog.charleslxh.com/categories/elasticsearch/nlp/"/>
    
    
      <category term="搜索引擎" scheme="http://blog.charleslxh.com/tags/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/"/>
    
      <category term="ElasticSearch" scheme="http://blog.charleslxh.com/tags/elasticsearch/"/>
    
      <category term="IK" scheme="http://blog.charleslxh.com/tags/ik/"/>
    
  </entry>
  
  <entry>
    <title>搜索引擎 ElasticSearch - 构建自己的 HanLP 中文分词插件</title>
    <link href="http://blog.charleslxh.com/2017/05/27/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E-elasticsearch-%E6%9E%84%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84-hanlp-%E4%B8%AD%E6%96%87%E5%88%86%E8%AF%8D%E6%8F%92%E4%BB%B6/"/>
    <id>http://blog.charleslxh.com/2017/05/27/搜索引擎-elasticsearch-构建自己的-hanlp-中文分词插件/</id>
    <published>2017-05-27T06:02:57.000Z</published>
    <updated>2017-05-27T10:19:56.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="ElasticSearch" scheme="http://blog.charleslxh.com/categories/elasticsearch/"/>
    
    
      <category term="搜索引擎" scheme="http://blog.charleslxh.com/tags/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/"/>
    
      <category term="ElasticSearch" scheme="http://blog.charleslxh.com/tags/elasticsearch/"/>
    
      <category term="HanLP" scheme="http://blog.charleslxh.com/tags/hanlp/"/>
    
  </entry>
  
  <entry>
    <title>搜索引擎 ElasticSearch - 搜索建议的实现</title>
    <link href="http://blog.charleslxh.com/2017/05/27/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E-elasticsearch-%E6%90%9C%E7%B4%A2%E5%BB%BA%E8%AE%AE%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>http://blog.charleslxh.com/2017/05/27/搜索引擎-elasticsearch-搜索建议的实现/</id>
    <published>2017-05-27T06:02:43.000Z</published>
    <updated>2017-05-27T10:19:59.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="ElasticSearch" scheme="http://blog.charleslxh.com/categories/elasticsearch/"/>
    
    
      <category term="搜索引擎" scheme="http://blog.charleslxh.com/tags/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/"/>
    
      <category term="ElasticSearch" scheme="http://blog.charleslxh.com/tags/elasticsearch/"/>
    
      <category term="搜索建议" scheme="http://blog.charleslxh.com/tags/%E6%90%9C%E7%B4%A2%E5%BB%BA%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>搜索引擎 ElasticSearch - 同义词方案</title>
    <link href="http://blog.charleslxh.com/2017/05/27/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E-elasticsearch-%E5%90%8C%E4%B9%89%E8%AF%8D%E6%96%B9%E6%A1%88/"/>
    <id>http://blog.charleslxh.com/2017/05/27/搜索引擎-elasticsearch-同义词方案/</id>
    <published>2017-05-27T06:02:21.000Z</published>
    <updated>2017-05-27T10:20:04.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="ElasticSearch" scheme="http://blog.charleslxh.com/categories/elasticsearch/"/>
    
    
      <category term="搜索引擎" scheme="http://blog.charleslxh.com/tags/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/"/>
    
      <category term="ElasticSearch" scheme="http://blog.charleslxh.com/tags/elasticsearch/"/>
    
      <category term="同义词" scheme="http://blog.charleslxh.com/tags/%E5%90%8C%E4%B9%89%E8%AF%8D/"/>
    
  </entry>
  
  <entry>
    <title>搜索引擎 ElasticSearch - 如何搭配使用 IK 和 HanLP</title>
    <link href="http://blog.charleslxh.com/2017/05/27/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E-elasticsearch-%E5%A6%82%E4%BD%95%E6%90%AD%E9%85%8D%E4%BD%BF%E7%94%A8-ik-%E5%92%8C-hanlp/"/>
    <id>http://blog.charleslxh.com/2017/05/27/搜索引擎-elasticsearch-如何搭配使用-ik-和-hanlp/</id>
    <published>2017-05-27T06:01:38.000Z</published>
    <updated>2017-05-27T10:20:02.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="ElasticSearch" scheme="http://blog.charleslxh.com/categories/elasticsearch/"/>
    
      <category term="NLP" scheme="http://blog.charleslxh.com/categories/elasticsearch/nlp/"/>
    
    
      <category term="搜索引擎" scheme="http://blog.charleslxh.com/tags/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/"/>
    
      <category term="ElasticSearch" scheme="http://blog.charleslxh.com/tags/elasticsearch/"/>
    
      <category term="IK" scheme="http://blog.charleslxh.com/tags/ik/"/>
    
      <category term="HanLP" scheme="http://blog.charleslxh.com/tags/hanlp/"/>
    
  </entry>
  
  <entry>
    <title>让你的服务器更安全 - 初始化服务器配置</title>
    <link href="http://blog.charleslxh.com/2017/05/20/%E8%AE%A9%E4%BD%A0%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9B%B4%E5%AE%89%E5%85%A8-%E5%88%9D%E5%A7%8B%E5%8C%96%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE/"/>
    <id>http://blog.charleslxh.com/2017/05/20/让你的服务器更安全-初始化服务器配置/</id>
    <published>2017-05-20T02:20:33.000Z</published>
    <updated>2017-06-03T03:10:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>当你创建或购买了了一个新的的服务器的时候，有一些必要的步骤作来配置你的服务器，比如：<code>root</code> 用户权限过大问题、<code>SSH</code> 安全连接问题等等、使用虚拟内存等等。这将增加您的服务器的安全性和可用性，并将为后续行动提供坚实的基础。</p>
<a id="more"></a>
<p>下面我将会解释如何在 <code>Ubuntu 14.04</code> 中使用做一些安全性基本配置。</p>
<h2 id="创建用户"><a class="header-anchor" href="#创建用户">¶</a>创建用户</h2>
<h3 id="使用-root-用户登录"><a class="header-anchor" href="#使用-root-用户登录">¶</a>使用 Root 用户登录</h3>
<h3 id="创建一个新用户"><a class="header-anchor" href="#创建一个新用户">¶</a>创建一个新用户</h3>
<h3 id="赋予-root-权限"><a class="header-anchor" href="#赋予-root-权限">¶</a>赋予 Root 权限</h3>
<h3 id="禁用-root-用户"><a class="header-anchor" href="#禁用-root-用户">¶</a>禁用 Root 用户</h3>
<h2 id="添加公钥认证"><a class="header-anchor" href="#添加公钥认证">¶</a>添加公钥认证</h2>
<h2 id="配置时区和-ntp"><a class="header-anchor" href="#配置时区和-ntp">¶</a>配置时区和 NTP</h2>
<h2 id="创建虚拟内存"><a class="header-anchor" href="#创建虚拟内存">¶</a>创建虚拟内存</h2>
<h2 id="配置时区和-ntp-v2"><a class="header-anchor" href="#配置时区和-ntp-v2">¶</a>配置时区和 NTP</h2>
<h2 id="配置防火墙"><a class="header-anchor" href="#配置防火墙">¶</a>配置防火墙</h2>
<p>配置防火墙是提高服务器安全方面很重要的一部分，他可以有限提高你的服务器的安全性和可用性，具体配置可以参考 <a href="/2017/05/20/%E8%AE%A9%E4%BD%A0%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9B%B4%E5%AE%89%E5%85%A8-%E4%BD%BF%E7%94%A8-UFW-%E5%BC%80%E5%90%AF%E9%98%B2%E7%81%AB%E5%A2%99/#more">让你的服务器更安全 - 使用 UFW 开启防火墙</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当你创建或购买了了一个新的的服务器的时候，有一些必要的步骤作来配置你的服务器，比如：&lt;code&gt;root&lt;/code&gt; 用户权限过大问题、&lt;code&gt;SSH&lt;/code&gt; 安全连接问题等等、使用虚拟内存等等。这将增加您的服务器的安全性和可用性，并将为后续行动提供坚实的基础。&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://blog.charleslxh.com/categories/linux/"/>
    
    
      <category term="Linux" scheme="http://blog.charleslxh.com/tags/linux/"/>
    
      <category term="Security" scheme="http://blog.charleslxh.com/tags/security/"/>
    
  </entry>
  
  <entry>
    <title>让你的服务器更安全 - 使用 UFW 开启防火墙</title>
    <link href="http://blog.charleslxh.com/2017/05/20/%E8%AE%A9%E4%BD%A0%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9B%B4%E5%AE%89%E5%85%A8-%E4%BD%BF%E7%94%A8-UFW-%E5%BC%80%E5%90%AF%E9%98%B2%E7%81%AB%E5%A2%99/"/>
    <id>http://blog.charleslxh.com/2017/05/20/让你的服务器更安全-使用-UFW-开启防火墙/</id>
    <published>2017-05-20T01:58:52.000Z</published>
    <updated>2017-06-03T03:10:44.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>UFW</code>(Uncomplicated Firewall) 是一个非常容易上手的 <code>iptables</code> 类防火墙配置工具，这个工具可以对出入服务的网络数据进行分割、过滤、转发等等细微的控制，进而实现诸如防火墙、 <code>NAT</code> 等功能。它简化了 <code>iptable</code> 那复杂的配置过程。我们都知道 <code>iptable</code> 非常强大、灵活，但是对于初学者来学习如何使用它正确的配置防火墙是比较难的，但是你又想保护你的网络，<code>UFW</code> 将会是你最好的选择。</p>
<a id="more"></a>
<p>下面我将会解释如何在 <code>Ubuntu 14.04</code> 中使用 <code>UFW</code> 安装、配置防火墙。</p>
<h2 id="使用前提"><a class="header-anchor" href="#使用前提">¶</a>使用前提</h2>
<p>在你使用这片教材之前，我希望你有一个独立的 <code>no-root</code> 超级管理员用户 - 拥有 <code>root</code> 的所有权限。你可以查看我这篇文章 <a href="/2017/05/20/%E8%AE%A9%E4%BD%A0%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9B%B4%E5%AE%89%E5%85%A8-%E5%88%9D%E5%A7%8B%E5%8C%96%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE/">让你的服务器更安全 - 初始化服务器配置</a> 中创建用户相关步骤。</p>
<p>一般来说 <code>UFW</code> 是默认会被安装的，假如你的系统中没有安装，你可以使用 <code>apt-get</code> 来安装。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get install ufw</div></pre></td></tr></table></figure>
<h2 id="使用-ipv6"><a class="header-anchor" href="#使用-ipv6">¶</a>使用 IPv6</h2>
<p>如果你的 <code>Ubuntu</code> 服务器已启用 <code>IPv6</code>，为了确保 <code>UFW</code> 能支持 <code>IPv6</code> 协议。</p>
<p>打开 <code>UFW</code> 的相关配置，使用你最喜欢的编辑器，这里我使用 <code>vim</code> ：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ vim /etc/default/ufw</div></pre></td></tr></table></figure>
<p>然后，确认 <code>IPv6</code> 是否设置成 <code>yes</code>，如果没有则设置为 <code>yes</code>，大致如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">IPV6=yes</div><div class="line">...</div></pre></td></tr></table></figure>
<p>退出并保存，当 <code>UFW</code> 开启时，它将会同时支持 <code>IPv4</code> 和 <code>IPv6</code> 的配置规则。</p>
<h2 id="查看-ufw-状态和配置规则"><a class="header-anchor" href="#查看-ufw-状态和配置规则">¶</a>查看 UFW 状态和配置规则</h2>
<p>在任何时间，你都可以检查它的状态和配置规则，如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo ufw status verbose</div></pre></td></tr></table></figure>
<p>默认情况下，<code>UFW</code> 并没有开启，它将会输出如下结果：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Output:</span></div><div class="line">Status: inactive</div></pre></td></tr></table></figure>
<p>假如你已经开启了防火墙，它将会输出状态为 <code>active</code>，并列出你所配置的规则。例如：你允许来自任何地方的 <code>SSH</code> 连接，将将会输出如下结果：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Output</span></div><div class="line">Status: active</div><div class="line">Logging: on (low)</div><div class="line">Default: deny (incoming), allow (outgoing), disabled (routed)</div><div class="line">New profiles: skip</div><div class="line"></div><div class="line">To                         Action      From</div><div class="line">--                         ------      ----</div><div class="line">22/tcp                     ALLOW IN    Anywhere</div></pre></td></tr></table></figure>
<p>像这样通过 <code>status</code> 就可以检查你的防火墙状态和配置了。</p>
<blockquote>
<p><strong>注意：在开启防火墙之前，你需要确保你允许了 SSH 连接，否则当你关闭远程连接后，你就无法再连上了。博主自己就曾用这招坑了自己！<img class="emoji" draggable="false" alt="😂" src="https://twemoji.maxcdn.com/2/72x72/1f602.png"></strong></p>
</blockquote>
<h2 id="设置默认规则"><a class="header-anchor" href="#设置默认规则">¶</a>设置默认规则</h2>
<p>当你需要开始配置你的防火墙规则时，首先，你需要设置默认规则：拒绝所有流入连接，允许流出连接。意思是，不允许任何人连接你的主机，允许主机内的任何应用访问外部网络。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sudo ufw default deny incoming</div><div class="line">$ sudo ufw default allow outgoing</div></pre></td></tr></table></figure>
<h2 id="开启-ssh-连接"><a class="header-anchor" href="#开启-ssh-连接">¶</a>开启 SSH 连接</h2>
<p>上面我们已经设置了默认不接受任何外来连接，同样也包括了 <code>SSH</code> 使用的 <code>22</code> 端口。所以，为了我们能通过 <code>SSH</code> 来操作主机，所以我们需要配置允许 <code>SSH</code> 连接到我们的主机上。</p>
<p>通过如下命令来配置：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> sudo ufw allow ssh</span></div></pre></td></tr></table></figure>
<p>这个配置将会允许所有 <code>22</code> 端口上的连接，默认 <code>22</code> 端口是被 <code>SSH</code> 监听的。<code>UFW</code> 知道什么是 <code>ssh</code>，因为它在 <code>/etc/services</code> 中已经被定义好了。</p>
<p>当然我们也可以指定允许 <code>22</code> 端口的所有连接：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo ufw allow 22</div></pre></td></tr></table></figure>
<p>这个和上面一个命令的作用是一样的。</p>
<h2 id="开启-ufw"><a class="header-anchor" href="#开启-ufw">¶</a>开启 UFW</h2>
<p>上面已经允许 <code>SSH</code> 连接，我们就可以放心的开启防火墙了，使用如下命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo ufw <span class="built_in">enable</span></div></pre></td></tr></table></figure>
<p>在这个过程中，你将会收到一条警告信息（<code>command may disrupt existing ssh connections.</code>），需要你手动确认，输入 <code>y</code> 按回车即可。</p>
<p><img class="emoji" draggable="false" alt="😄" src="https://twemoji.maxcdn.com/2/72x72/1f604.png"> 太棒了，我们已经开启了防火墙，你可以再一次通过 <code>sudo ufw status verbose</code> 来查看。</p>
<h2 id="配置其他规则"><a class="header-anchor" href="#配置其他规则">¶</a>配置其他规则</h2>
<h3 id="http-https"><a class="header-anchor" href="#http-https">¶</a>HTTP/HTTPS</h3>
<p>当我们部署 <code>WEB</code> 引用服务器时，我们需要使用 <code>80</code> 或 <code>443</code> 端口来接受请求，这是我们需要开启这两个端口，操作如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sudo ufw allow http</div><div class="line">$ sudo ufw allow https</div></pre></td></tr></table></figure>
<p>或者，你可以指定端口：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sudo ufw allow 80</div><div class="line">$ sudo ufw allow 443</div></pre></td></tr></table></figure>
<h3 id="ftp"><a class="header-anchor" href="#ftp">¶</a>FTP</h3>
<p><code>FTP</code> 连接一般用于非加密文件传输，它默认监听 <code>21</code> 端口，也许你永远都不会用到。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo ufw allow ftp</div></pre></td></tr></table></figure>
<p>或者，你可以指定端口：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo ufw allow 21/tcp</div></pre></td></tr></table></figure>
<h2 id="指定端口范围"><a class="header-anchor" href="#指定端口范围">¶</a>指定端口范围</h2>
<p>你可以指定一个端口范围，来配置防火墙策略，当有些服务需要使用多个端口时，这个就起到了作用。</p>
<p>如，为了允许所有 <code>X11</code> 连接，他们使用的端口范围是 <code>6000</code> ~ <code>6007</code>，你可以这样配置：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sudo ufw allow 6000:6007/tcp</div><div class="line">$ sudo ufw allow 6000:6007/udp</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>指定端口范围时，你必须指定协议类型（<code>TCP</code> 或 <code>UDP</code>）。</strong></p>
</blockquote>
<h2 id="指定-ip-地址"><a class="header-anchor" href="#指定-ip-地址">¶</a>指定 IP 地址</h2>
<p>使用 <code>UFW</code> 工作的时候，你可以指定 <code>IP</code> 地址，例如：假如你想允许来自某一个 <code>IP</code> 所有连接，你可以指定 <code>from</code> 这个 <code>IP</code> 地址。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo ufw allow from 192.168.66.213</div></pre></td></tr></table></figure>
<p>上面的配置将会允许 <code>192.168.66.213</code> 连接到我们主机的任何开放了的端口。</p>
<p>我们还可以指定只允许某个 <code>IP</code> 到主机某一个端口的连接，拒绝某个 <code>IP</code> 到主机其他所有端口的连接，我们可以这样做：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo ufw allow from 192.168.66.213 to any port 80</div></pre></td></tr></table></figure>
<p>上面配置中，我们只允许 <code>192.168.66.213</code> 连接到我们的 <code>80</code> 端口。</p>
<h2 id="配置子网"><a class="header-anchor" href="#配置子网">¶</a>配置子网</h2>
<p>当你需要允许子网内所有的 <code>IP</code>，你可以 <code>CIDR</code> 的格式来配置，例如：当你需要允许 <code>IP</code> 地址从 <code>192.168.1.1</code> 到 <code>192.168.1.254</code> 内所有 <code>IP</code> 的连接时，你可以这样配置：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo ufw allow from 192.168.1.1/24</div></pre></td></tr></table></figure>
<p>当然，像上面一样，我们也可以同时指定端口号：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo ufw allow from 192.168.1.1/24 to any port 22</div></pre></td></tr></table></figure>
<p>上面配置中，我们允许 <code>192.168.1.1/24</code> 内的所有主机通过 <code>SSH</code> 连接我们的主机。</p>
<h2 id="指定网络接口"><a class="header-anchor" href="#指定网络接口">¶</a>指定网络接口</h2>
<p>如果您想创建只适用于特定网络接口的防火墙规则，您可以通过指定 <code>allow in on</code> 加上<strong>网络接口的名称</strong> 来配置规则。</p>
<p>在配置之前你可以先查找所有的网络接口，再配置：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ip addr</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Output Excerpt:</span></div><div class="line">...</div><div class="line">2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state</div><div class="line">...</div><div class="line">3: eth1: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc noop state DOWN group default </div><div class="line">...</div></pre></td></tr></table></figure>
<p>上面列举了网络接口的一些信息，他们通常叫做 <code>eth0</code> 或 <code>eth1</code> 之类的名字。</p>
<p>假如你的 <code>eth0</code> 为公网地址，你同事需要向外开放 <code>80</code> 端口，你可以如下操作：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo ufw allow <span class="keyword">in</span> on eth0 to any port 80</div></pre></td></tr></table></figure>
<p>上面配置中，你的服务器将会接受来自于公网的 HTTP 请求。</p>
<p>另外，假如你想你的 <code>MySQL</code> 服务器（监听 <code>3306</code>）只接受通过内网网卡 <code>eth1</code> 的请求，你可以这样：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo ufw allow <span class="keyword">in</span> on eth1 to any port 3306</div></pre></td></tr></table></figure>
<p>如上配置中，只有在用一个内网中的服务器才能连接你的 <code>MySQL</code> 服务器。</p>
<h2 id="添加拒绝连接规则"><a class="header-anchor" href="#添加拒绝连接规则">¶</a>添加拒绝连接规则</h2>
<p>假如你没有修改过我们上面设置过的默认规则，它将会拒绝所有的外来连接，通常情况下，这样大大的简化了你配置一系列的防火墙规则，比如要求你创建指定端口啊，指定 <code>IP</code> 啊等等。但是，如果你想拒绝某个 <code>IP</code> 源或者某个网段的特定连接；也许你知道攻击源就来自于某个 <code>IP</code> 或某个网段；再者，你想把默认外接规则(incomming rule) 设置为 <strong>allow</strong>，这是你就需要指定某些拒绝规则了。</p>
<p>配置 <em>拒绝规则</em> ，更我们上面配置 <em>允许规则</em> 是一样的方式，只不过将 <code>allow</code> 改为 <code>deny</code>。</p>
<p>如：拒绝所有 HTTP 连接，即：拒绝所有连接 <code>80</code> 端口。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo ufw deny http</div></pre></td></tr></table></figure>
<p>当然，也可以指定端口号：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo ufw deny 80</div></pre></td></tr></table></figure>
<p>拒绝某一个 <code>192.168.1.10</code> 通过 <code>SSH</code> 连接到我们的主机上：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo ufw deny from 192.168.1.10 to any port 22</div></pre></td></tr></table></figure>
<p>如果你想书写更多的 <em>拒绝规则</em> ，请参考之前描述的 <em>允许规则</em> 书写方式，将 <code>allow</code> 改为 <code>deny</code> 即可。</p>
<p>现在我们知道如何添加 <em>允许规则</em> 和 <em>拒绝规则</em>，但是我们还不知道如何删除规则，没关系，我们再往下看。</p>
<h2 id="删除规则"><a class="header-anchor" href="#删除规则">¶</a>删除规则</h2>
<p>众所周知，如何删除一条防火墙规则和如何创建一条防火墙规则一样重要，<code>UFW</code> 提供了两种路径删除他们：</p>
<ul>
<li><a href="#%E6%8C%87%E5%AE%9A%E8%A7%84%E5%88%99%E5%BA%8F%E5%8F%B7%E5%88%A0%E9%99%A4">通过规则序号来删除</a></li>
<li><a href="#%E6%8C%87%E5%AE%9A%E5%AE%9E%E9%99%85%E8%A7%84%E5%88%99%E5%88%A0%E9%99%A4">通过实际规则来删除</a></li>
</ul>
<h3 id="指定规则序号删除"><a class="header-anchor" href="#指定规则序号删除">¶</a>指定规则序号删除</h3>
<p>每一个规则在创建时都会分配一个序号，你可以将它理解为数据库的自增 <code>ID</code> 吧，可以通过他来进行更方便的操作，你可以通过如下方式查看序号：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo ufw status numbered</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Numbered Output:</div><div class="line">Status: active</div><div class="line"></div><div class="line">     To                         Action      From</div><div class="line">     --                         ------      ----</div><div class="line">[ 1] 22                         ALLOW IN    15.15.15.0/24</div><div class="line">[ 2] 80                         ALLOW IN    Anywhere</div></pre></td></tr></table></figure>
<p>假如你想删除第 <code>2</code> 条规则，拒绝所有指向 <code>80</code> 端口的连接，如下操作：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo ufw delete 2</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意：如果你启用了 IPv6 规则，这同时也将删除相应的 IPv6 规则。</strong></p>
</blockquote>
<h3 id="指定实际规则删除"><a class="header-anchor" href="#指定实际规则删除">¶</a>指定实际规则删除</h3>
<p>如果你不想通过 <em>规则序号</em> 来删除，你可以指定 <strong>创建时的参数格式</strong> 来删除，例如：当你使用 <code>sudo ufw allow http</code> 创建的规则时，你可以通过如下方式删除：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo ufw delete allow http</div></pre></td></tr></table></figure>
<p>同样你可以指定端口号来替代服务名：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo ufw delete allow 80</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意：这种方式将会同时删除相应的 IPv4 和 IPv6规则。</strong></p>
</blockquote>
<h2 id="关闭-ufw"><a class="header-anchor" href="#关闭-ufw">¶</a>关闭 UFW</h2>
<p>现在，由于某些我们不想开启防火墙了，我们可以关闭它：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo ufw <span class="built_in">disable</span></div></pre></td></tr></table></figure>
<h2 id="重置-ufw-的配置"><a class="header-anchor" href="#重置-ufw-的配置">¶</a>重置 UFW 的配置</h2>
<p>将入你配置了好多规则，但是你现在需要重新配置，抛弃之前的配置规则，你可以这么做：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo ufw reset</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>这个命令将会删除你之前配置的所有规则，但是默认规则将会被保留。</strong></p>
</blockquote>
<h2 id="总结"><a class="header-anchor" href="#总结">¶</a>总结</h2>
<p>服务器安全一直都是一个重要的话题，开启防火墙使我们保护服务器安全的重要手段之一，所以，无论什么情况下，我们都应该为服务器开启防火墙。当然，开放 <code>SSH</code> 也是必不可少的，与此同时，你可以允许一些连接到您的服务器，同时并限制一些不必要的连接，这样您的服务器才会更加的安全的提供服务。</p>
<p>想了解更多的 <code>UFW</code> 防火墙配置，你可以参考这篇文章：<a href="https://www.digitalocean.com/community/tutorials/ufw-essentials-common-firewall-rules-and-commands" target="_blank" rel="external">UFW Essentials: Common Firewall Rules and Commands</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;UFW&lt;/code&gt;(Uncomplicated Firewall) 是一个非常容易上手的 &lt;code&gt;iptables&lt;/code&gt; 类防火墙配置工具，这个工具可以对出入服务的网络数据进行分割、过滤、转发等等细微的控制，进而实现诸如防火墙、 &lt;code&gt;NAT&lt;/code&gt; 等功能。它简化了 &lt;code&gt;iptable&lt;/code&gt; 那复杂的配置过程。我们都知道 &lt;code&gt;iptable&lt;/code&gt; 非常强大、灵活，但是对于初学者来学习如何使用它正确的配置防火墙是比较难的，但是你又想保护你的网络，&lt;code&gt;UFW&lt;/code&gt; 将会是你最好的选择。&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://blog.charleslxh.com/categories/linux/"/>
    
    
      <category term="Linux" scheme="http://blog.charleslxh.com/tags/linux/"/>
    
      <category term="Security" scheme="http://blog.charleslxh.com/tags/security/"/>
    
      <category term="Ubuntu" scheme="http://blog.charleslxh.com/tags/ubuntu/"/>
    
      <category term="Firewall" scheme="http://blog.charleslxh.com/tags/firewall/"/>
    
      <category term="UFW" scheme="http://blog.charleslxh.com/tags/ufw/"/>
    
  </entry>
  
  <entry>
    <title>Redis 基础之命令详解</title>
    <link href="http://blog.charleslxh.com/2017/05/20/Redis-%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/"/>
    <id>http://blog.charleslxh.com/2017/05/20/Redis-基础之命令详解/</id>
    <published>2017-05-20T01:53:53.000Z</published>
    <updated>2017-05-20T07:01:20.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="Redis" scheme="http://blog.charleslxh.com/categories/redis/"/>
    
    
      <category term="Redis" scheme="http://blog.charleslxh.com/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://blog.charleslxh.com/2017/05/17/hello-world/"/>
    <id>http://blog.charleslxh.com/2017/05/17/hello-world/</id>
    <published>2017-05-17T15:29:20.000Z</published>
    <updated>2017-05-20T07:01:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="quick-start"><a class="header-anchor" href="#quick-start">¶</a>Quick Start</h2>
<h3 id="create-a-new-post"><a class="header-anchor" href="#create-a-new-post">¶</a>Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="run-server"><a class="header-anchor" href="#run-server">¶</a>Run server</h3>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="generate-static-files"><a class="header-anchor" href="#generate-static-files">¶</a>Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="deploy-to-remote-sites"><a class="header-anchor" href="#deploy-to-remote-sites">¶</a>Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
      <category term="Test" scheme="http://blog.charleslxh.com/categories/test/"/>
    
    
      <category term="Testing" scheme="http://blog.charleslxh.com/tags/testing/"/>
    
  </entry>
  
</feed>
