<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[邮件服务器 - sendmail/postfix]]></title>
    <url>%2F2017%2F10%2F31%2F%E9%82%AE%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8-sendmail-postfix%2F</url>
    <content type="text"></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Security</tag>
        <tag>Fail2ban</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[让你的服务器更安全 - 使用 Fail2ban 自动检测恶意攻击]]></title>
    <url>%2F2017%2F10%2F31%2F%E8%AE%A9%E4%BD%A0%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9B%B4%E5%AE%89%E5%85%A8-%E4%BD%BF%E7%94%A8-fail2ban-%E8%87%AA%E5%8A%A8%E6%A3%80%E6%B5%8B%E6%81%B6%E6%84%8F%E6%94%BB%E5%87%BB%2F</url>
    <content type="text"><![CDATA[对于 SSH 服务的常见的攻击就是暴力破解攻击——远程攻击者通过不同的密码来无限次地进行登录尝试。当然 SSH 可以设置使用非密码验证验证方式来对抗这种攻击，例如 公钥验证 或者 双重验证。将不同的验证方法的优劣处先放在一边，如果我们必须使用密码验证方式怎么办？你是如何保护你的 SSH 服务器免遭暴力破解攻击的呢？ fail2ban 是 Linux 上的一个著名的入侵保护的开源框架，它会监控多个系统的日志文件（例如：/var/log/auth.log 或者 /var/log/secure）并根据检测到的任何可疑的行为自动触发不同的防御动作。事实上，fail2ban在防御对 SSH 服务器的暴力密码破解上非常有用。 在这篇指导教程中，我会演示如何安装并配置 fail2ban 来保护 SSH 服务器以避免来自远程 IP 地址的暴力攻击。 注：本文仅介绍在 Ubuntu 中的使用方式，其他系统请参考官方手册。 ¶使用前提 你的服务器需要安装 Fail2ban，安装如下。 1$ sudo apt-get install fail2ban 你也许会和其他服务配置使用，如：iptables、sendmail，详情请参考： 让你的服务器更安全 - 使用 Iptables 防火墙 邮件服务器 - sendmail/postfix ¶如何使用 ¶基础定义 在使用之前，我们需要了解 fail2ban 中每个术语的意义与作用： filter：过滤器，定义了一系列正在表达式，用于匹配指定日志文件中的每行内容。 action：执行动作，当 fail2ban 检测到可疑行为时做出的动作。 jail：任务，定义 fail2ban 的自动检测任务，可以自由组合 filter 和 action。 fail2ban-server：fail2ban 服务器。 fail2ban-client：fail2ban 客户端。 ¶fail2ban 服务器 fail2ban 是一个多线程的服务器，用于执行 fail2ban-client 发送过来的命令。操作如下： 1$ sudo service fail2ban start|stop|restart ¶fail2ban 客户端 fail2ban 客户端，他通过 Unix domain socket 的方式连接服务器，通过发送命令去配置和操作 fail2ban 服务器，常用选项如下： 123456789-c &lt;DIR&gt; configuration directory-s &lt;FILE&gt; socket path-d dump configuration. For debugging-i interactive mode-v increase verbosity-q decrease verbosity-x force execution of the server-h, --help display this help message-V, --version print the version 配置文件里定义的所有配置都可以手动修改的，只需要通过 set 命令修改即可，如下： 12$ sudo fail2ban-client set loglevel 1$ sudo fail2ban-client set logtarget STDERR 启动服务： 1$ sudo fail2ban-client start 更新配置： 1$ sudo faile2ban-client reload ¶定义配置 首先，我们先来看一下 fail2ban 的配置目录结构： 123456789101112131415161718192021222324/etc/fail2ban/├── action.d│ ├── dummy.conf│ ├── hostsdeny.conf│ ├── iptables.conf│ ├── mail-whois.conf│ ├── mail.conf│ └── shorewall.conf├── fail2ban.conf├── fail2ban.local├── filter.d│ ├── apache-auth.conf│ ├── apache-noscript.conf│ ├── couriersmtp.conf│ ├── postfix.conf│ ├── proftpd.conf│ ├── qmail.conf│ ├── sasl.conf│ ├── sshd.conf│ └── vsftpd.conf├── jail.conf├── jail.local├── jail.d│ ├── your_jail.conf action.d：定义了一系列动作，如：发送邮件、使用 iptables 等，自定义的动作也放在该目录下。 fail2ban.conf：定义了 fail2ban 服务配置。 filter.d：定义了一系列过滤器，安装时会自带一些，自定义过滤器也房放在该目录下。 jail.conf：定义自动检测任务，包含一些默认参数，定义了一些常用服务的检测规则。 jail.d：自定义检测任务规则，存放在该目录下。 ¶任务配置 ¶参考链接 Fail2ban Official Manual]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Security</tag>
        <tag>Fail2ban</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[自动检测恶意攻击]]></title>
    <url>%2F2017%2F10%2F31%2F%E8%87%AA%E5%8A%A8%E6%A3%80%E6%B5%8B%E6%81%B6%E6%84%8F%E6%94%BB%E5%87%BB%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[让你的服务器更安全 - 使用 Iptables 防火墙]]></title>
    <url>%2F2017%2F10%2F31%2F%E8%AE%A9%E4%BD%A0%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9B%B4%E5%AE%89%E5%85%A8-%E4%BD%BF%E7%94%A8-Iptables-%E9%98%B2%E7%81%AB%E5%A2%99%2F</url>
    <content type="text"></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Firewall</tag>
        <tag>Iptables</tag>
        <tag>Security</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux 成长之路（一）]]></title>
    <url>%2F2017%2F08%2F03%2Flinux-%E6%88%90%E9%95%BF%E4%B9%8B%E8%B7%AF%EF%BC%88%E4%B8%80%EF%BC%89%2F</url>
    <content type="text"><![CDATA[Linux 是非常流行的服务器操作系统，他的命令行非常优美，使用起来非常高效、快捷。让我们一起来享受这 窈窕淑女。]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Command</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[正则表达式 - 回溯]]></title>
    <url>%2F2017%2F06%2F03%2F%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F-%E5%9B%9E%E6%BA%AF%2F</url>
    <content type="text"><![CDATA[在正则表达式实现中，回溯是匹配过程的基本组成部分，它是正则表达式如此好用和强大的根源。然而，回溯计算代价很高，如果设计失误，将导致失控。回溯是影响整体性能的唯一因素，理解它的工作原理，以及如何减小使用频率，可能是编写高效正则表达式的关键点。 ¶匹配原理 当一个正则表达式扫描目标字符串时，从左到右逐个扫描正则表达式的组成部分，在每个位置上测试能不能找到一个匹配。对于每一个量词和分支，都必须确定如何继续进行。如果是一个量词（如 *、+、?或者 {2,}），那么正则表达式必须确定何时尝试匹配更多的字符；如果遇到分支（通过|操作符），那么正则表达式必须从这些选项中选择一个进行尝试。 当正则表达式做出这样的决定时，如果有必要，它会记住另一个选项，以备返回后使用。如果所选方案匹配成功，正则表达式将继续扫描正则表达式模板，如果其余部分匹配也成功了，那么匹配就结束了。但是，如果所选择的方案未能发现相应匹配，或者后来的匹配也失败了，正则表达式将回溯到最后一个决策点，然后在剩余的选项中选择一个。继续这样，直到找到一个匹配，或者量词和分支选项的所有可能的排列组合都尝试失败后放弃这一过程，然后移动到此过程开始位置的下一个字符上，重复此过程。 例如，下面的代码演示了这一过程是如何通过回溯处理分支的。 1/h(ello|appy) hippo/.test("hello there, happy hippo"); 上面一行正则表达式用于匹配 hello hippo 或 happy hippo。测试一开始要查找一个 h，目标字符串的第一个字母恰好就是 h，立刻就找到了。接下来，子表达式（ello|appy）提供了两个处理选项。正则表达式选择最左边的选项（分支选择总是从左到右进行），检查 ello 是否匹配字符串的下一个字符，确实匹配，然后正则表达式又匹配了后面的空格。 然而，在接下来的匹配中正则表达式“走进了死胡同”，因为 hippo 中的 h 不能匹配字符串中的下一个字母 t。此时正则表达式还不能放弃，因为它还没有尝试过所有的选择，随后它回溯到最后一个检查点（在匹配了首字母h 之后的那个位置上）并尝试匹配第二个分支选项。但由于匹配没有成功，而且也没有更多的选项了，正则表达式认为从字符串的第一个字符开始匹配是不能成功的，因此它从第二个字符开始重新进行查找。正则表达式没有找到h，继续向后找，直到第 14 个字母才找到，它匹配 happy 的那个 h。随后正则表达式再次进入分支过程，这次 ello 未能匹配，但在回溯之后的第二次分支中，它匹配了整个字符串 happy hippo，匹配成功了。 再如，下面代码演示了带重复量词的回溯。 12var str = "&lt;p&gt;Para 1.&lt;/p&gt;" +"&lt;img src='smiley.jpg'&gt;" +"&lt;p&gt;Para 2.&lt;/p&gt;" +"&lt;div&gt;Div.&lt;/div&gt;"; /&lt;p&gt;.*&lt;\/p&gt;/i.test(str); 正则表达式先匹配了字符串开始的 3 个字母 &lt;p&gt;，然后是 .*。点号表示匹配除换行符以外的任意字符，星号这个 贪性量词(表示重复零次或多次)，匹配尽量多的次数。因为目标字符串中没有换行符，正则表达式将匹配剩下的全部字符串！不过由于正则表达式模板中还有更多内容需要匹配，所以正则表达式尝试匹配 &lt; 。由于在字符串末尾匹配不成功，因此每次回溯一个字符，继续尝试匹配&lt;，直到正则表达式回到 &lt;/div&gt; 标签的 &lt; 位置。接下来尝试匹配 \/（转义反斜杠），匹配成功，然后匹配 p，匹配不成功。正则表达式继续回溯，重复此过程，直到第二段末尾时终于匹配了 &lt;/p&gt;。匹配返回成功需要从第一段头部一直扫描到最后一个的末尾，这可能不是我们想要的结果。 将正则表达式中的 贪性量词 改为 惰性量词（详细请查看如何设置量词为惰性），以匹配单个段落。惰性量词的回溯工作以相反方式进行。当正则表达式 /&lt;p&gt;.*?&lt;\/p&gt;/ 推进到 .*? 时，首先尝试全部跳过，然后继续匹配 &lt;\/p&gt;。 这样做是因为 *? 匹配零次或多次，尽可能少重复，尽可能少意味着可以重复零次。但是，当随后的 &lt; 在字符串的这一点上匹配失败时，正则表达式回溯并尝试下一个最小的字符数：1 个。正则表达式继续像这样向前回溯到第一段的末尾，在那里量词后面的 &lt;\/p&gt; 得到完全匹配。 如果目标字符串只有一个段落，那么此正则表达式的 贪性匹配 和 惰性匹配 是等价的，但尝试匹配的过程不同。 当一个正则表达式占用浏览器几秒甚至更长时间时，问题原因很可能是回溯失控。为说明此问题，给出下面的正则表达式，它的目标是匹配整个 HTML 文件。此表达式被拆分成多行是为了适合页面显示。与其他正则表达式不同，JavaScript 在没有选项时可使点号匹配任意字符，包括换行符，所以此例中以 [\s\S] 匹配任意字符。 12/&lt;html&gt;[\s\S]*?&lt;head&gt;[\s\S]*?&lt;title&gt;[\s\S]*?&lt;\/title&gt;[\s\S]*?&lt;\/head&gt; [\s\S]*?&lt;body&gt;[\s\S]*?&lt;\/body&gt;[\s\S]*?&lt;\/html&gt;/ ¶总结 回溯会大大降低我们正则表达式的执行效率与时间，所以我们需要尽量减少回溯的次数，这需要我们更加仔细的考虑每一个正则表达式。 ¶参考连接 Backreferences 正则表达式中的悲观回溯 Runaway Regular Expressions: Catastrophic Backtracking Regex Tutorial - Possessive Quantifiers Regex Tutorial - Atomic Grouping]]></content>
      <categories>
        <category>正则表达式</category>
      </categories>
      <tags>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[正则表达式 - 贪性与惰性]]></title>
    <url>%2F2017%2F06%2F03%2F%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F-%E8%B4%AA%E6%80%A7%E4%B8%8E%E6%83%B0%E6%80%A7%2F</url>
    <content type="text"><![CDATA[使用正则表达式中的 贪性、惰性、支配性 的量词可以控制表达式匹配过程，我们知道量词 ？、*、+ 的意义，可以指定相关模式出现的次数，默认的情况下我们使用的量词均是是贪婪量词，它的匹配过程是从整个字符串开始查看，如果不匹配就去掉最后一个，再看看是否匹配，如此循环一直到匹配或字符串空为止。不管是 贪性 还是 惰性 ，在正则表达式在匹配失败时都会触发 正则表达式回溯（详情查看正则表达式 - 回溯），从而影响其性能。 ¶量词（Quantifier） 首先，我们需要了解一下正则表达式的量词，正则表达式中有如下几种量词 ?、+、*、{n}、{n,m}、{n,}。 量词 匹配规则 例子 结果 ? 匹配出现 0 次或 1 次 /a?/.test(‘abcd’); true + 匹配出现 1 次或多次 /a+/.test(‘aaaaaaaa’); true * 匹配出现 0 次或 1 次或多次 /a*/.test(‘bbbbb’); true {n} 匹配刚好出现 n 次 /a{5}/.test(‘aaaab’); false {n,m} 匹配最少出现 n 次最多出现 m 次 a{1,3}/.test(‘aaabbb’); true {n,} 匹配最少出现 n 次 /a{3,}/.test(‘aabbb’); false ¶贪性匹配（greediness） 从字面意思我们就可以知道，所谓的&quot;贪婪&quot;的意思就是，如果符合要求就一直往后匹配，一直到无法匹配为止，这就是贪性匹配。默认情况下，?、+、*、{n}、{n,m}、{n,}都是贪婪的，也就是说，它会根据前导字符去匹配尽可能多的内容。 贪性匹配就是匹配尽可能 多 的内容。 假如我们有一个字符串 This is a &lt;EM&gt;first&lt;/EM&gt; test，我们使用 /&lt;.+&gt;/g 来匹配，我们期望匹配到两段文本，第一段为 &lt;EM&gt;，第二段匹配文本为 &lt;/EM&gt;，但是只得到了一段匹配文本：&lt;EM&gt;first&lt;/EM&gt;，很显然结果不尽人意，并不是我们想要的。 出现这种情况的罪魁祸首就是 + 是 贪性匹配（greedy） 的，正则表达式引擎执行 + 量词时尽可能的重复匹配前面的符号 . 回溯（即：正则表达式放弃上一次匹配，吐出一个匹配的字符给剩下的字符串），再一次使用下一个正则表达式符号来匹配剩下的字符串，如此反复 回溯 直到匹配成功或回溯到 0。通过下面的例子，可以更加直观的解释他的过程。 &lt;.+&gt; 匹配字符串 This is a &lt;EM&gt;first&lt;/EM&gt; test 的过程： 第一个符号为 &lt;，所以它将会匹配到字符串中的第一个 &lt; 字符。 第二个符号为 .，匹配任意字符（除了换行），使用 + 重复匹配，所以它将会不断重复匹配，直到他匹配到句尾，则匹配失败，.+ 匹配了 EM&gt;first&lt;/EM&gt; test。 到目前为止 &lt;.+ 匹配的字符串为：&lt;EM&gt;first&lt;/EM&gt; test。 正则表达式引擎开始对下一个正则表达式符号 &gt; 进行匹配，但字符串还未匹配的只剩下换行符了，于是匹配失败。 由于第三个符号 &gt; 匹配失败，正则表达式引擎回溯，回溯会使 .+ 减少（吐出）一个字符，回溯后的匹配状况是 .+ 匹配 EM&gt;first&lt;/EM&gt; tes。 正则表达式引擎使用符号 &gt; 匹配 t，结果依然不匹配。 如果重复 5、6 两步，直到 .+ 匹配 EM&gt;first&lt;/EM 时，正则表达式使用符号 &gt; 匹配 &gt; test，匹配成功。 正则表达式引擎报告 &lt;EM&gt;first&lt;/EM&gt; 就是匹配上的文本。 ¶可选性（optional） 我们都知道量词 ? 可以使前一个正则表达式字符是可选的，如：colou?r 可以匹配 colour 和 color。当然你也可以使用括号 () 将一些字符或规则标识为可选的，如：Nov(ember)? 将会匹配 Nov 和 November，当然你也可以使用 {0,1} 拉替代 ?，他们是等价的。 默认情况下 ? 也是 贪性匹配 的，即：他会优先尝试匹配该字符存在的情况，如果匹配失败，则尝试匹配该字符不存在的情况。例如： 我们用 Feb 23(rd)? 表达式匹配 Today is Feb 23rd, 2003 文本，匹配结果是 Feb 23rd 而不是 Feb 23。 如果是：Feb 23(rd)?? 呢？结果却是 Feb 23，是不是很奇妙，下面我们将会详细解答惰性匹配的原理。 ¶惰性匹配（laziness） 惰性模式就是一旦匹配到合适的就结束，不在继续匹配下去了，在重复量词后面添加问号 ? 即可形成惰性匹配。惰性匹配会尽可能少的匹配字符，但是必须要满足整个匹配模式。 惰性匹配就是匹配尽可能 少 的内容。 量词 匹配规则 ?? 匹配出现 0 次或 1 次，优先匹配 0 次 +? 匹配出现 1 次或多次，尽可能重复少的次数，不过最少次数是 1 *? 匹配出现 0 次或 1 次或多次，尽可能重复少的次数 {n}? 匹配刚好出现 n 次 {n,m}? 匹配最少出现 n 次最多出现 m 次，尽可能重复少的次数，不过最少次数是 n {n,}? 匹配最少出现 n 次，尽可能重复少的次数，不过最少次数是 n &lt;.+?&gt; 匹配字符串 This is a &lt;EM&gt;first&lt;/EM&gt; test 的过程： 第一个符号为 &lt;，所以它将会匹配到字符串中的第一个 &lt; 字符。 第二个符号为 .，匹配任意字符（除了换行），使用 +? 重复匹配，因为是惰性匹配，所以 + 会尽可能少的匹配（最少一次），第一次 .+ 匹配了 E。 正则表达式引擎开始对下一个正则表达式符号 &gt; 进行匹配，剩下的字符串 M&gt;first&lt;/EM&gt; test 的第一个字符为 M，于是匹配失败。 由于第三个符号 &gt; 匹配失败，正则表达式引擎回溯，回溯会使 .+ 扩大（吞入）一个字符，而不是贪性匹配的减少一个字符，回溯后的匹配状况是 .+ 匹配 EM。 正则表达式引擎开始对下一个正则表达式符号 &gt; 进行匹配，剩下的字符串 &gt;first&lt;/EM&gt; test 的第一个字符为 &gt;，于是匹配成功。 正则表达式引擎报告 &lt;EM&gt; 就是匹配上的文本。 ¶总结 贪性匹配，正则引擎会一直匹配到字符串最后；当匹配为 false 时，就回溯以找到倒数第一个匹配位置，返回匹配结果。 惰性匹配，正则引擎会匹配到符合 pattern 的末尾位置那个字符，然后再往后走一步，发现匹配为 false 时，就回溯以找到最近一个匹配为 true 的位置，返回匹配结果。 改善 贪性、惰性，减少回溯次数，能够有利于正则表达式的执行效率，写出更好的正则表达式。 如我们可以使用 &lt;[^&gt;]+&gt; 来取代 &lt;.+?&gt; 和 &lt;.+&gt;，这样回溯次数就降到了 0 次，当然，效率和耗时都是最佳的。 ¶参考连接 Optional Items Repetition with Star and Plus]]></content>
      <categories>
        <category>正则表达式</category>
      </categories>
      <tags>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java 线程安全与非线程安全]]></title>
    <url>%2F2017%2F05%2F27%2Fjava-%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E4%B8%8E%E9%9D%9E%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%2F</url>
    <content type="text"><![CDATA[还记得初学 Java 的时候，老师是这样告诉我们的：ArrayList 是非线程安全的，Vector 是线程安全的；HashMap 是非线程安全的，HashTable 是线程安全的；StringBuilder 是非线程安全的，StringBuffer 是线程安全的。对，很快我们也记住了这一面试宝典，但是当面试官继续往下问你：什么是线程安全和非线程安全？他们有什么区别？什么场景用哪一种模式？这时，你是不是会吐上一口老血。 ¶原子性 首先，我们吸纳来了解一下什么是原子性，这个概念大家或许耳熟能详。 在多线程访问共享资源（同一块内存），能保证在同一时间，只有一个进程访问该资源，并且该操作不可被分割，不能被打断，必须执行到结束，不会被线程切换打断，这就是原子性。 这个在 Java 多线程编程中是老生常谈的话题了，所谓的原子操作是指不会被线程调度机制打断的操作，这种操作从执行开始就会一直执行结束，中间不会出现任何的 context switch（线程的切换）。 ¶线程安全与非线程安全 那到底什么是线程安全呢，其实线程安全就是一个原子操作，大致是：当一个线程调用一个线程安全的方法时，其他的线程就不能调用该线程安全的方法了，而必须要等到正在执行的线程结束后才能调用。 其实也是线程同步的问题，若是每个线程对共享内存都做只读操作，而无写操作，那么这块共享内存是线程安全，若是有多个线程会同时进行写操作，这时候就需要考虑线程同步的问题了，这就涉及到了线程安全之间问题。 ¶线程安全模拟 首先，我们用 ArrayList 来演示非线程安全，我们在主线程有一个 ArrayList，在主线程开启四个子线程分别往这个列表中插入值，]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>线程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[搜索引擎 ElasticSearch - 使用 Docker 搭建 ELK 系统]]></title>
    <url>%2F2017%2F05%2F27%2F%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E-elasticsearch-%E4%BD%BF%E7%94%A8-docker-%E6%90%AD%E5%BB%BA-elk-%E7%B3%BB%E7%BB%9F%2F</url>
    <content type="text"></content>
      <categories>
        <category>ElasticSearch</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>搜索引擎</tag>
        <tag>ElasticSearch</tag>
        <tag>ELK</tag>
        <tag>LogStash</tag>
        <tag>Kibana</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[搜索引擎 ElasticSearch - 使用 IK 中文分词插件]]></title>
    <url>%2F2017%2F05%2F27%2F%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E-elasticsearch-%E4%BD%BF%E7%94%A8-ik-%E4%B8%AD%E6%96%87%E5%88%86%E8%AF%8D%E6%8F%92%E4%BB%B6%2F</url>
    <content type="text"></content>
      <categories>
        <category>ElasticSearch</category>
        <category>NLP</category>
      </categories>
      <tags>
        <tag>搜索引擎</tag>
        <tag>ElasticSearch</tag>
        <tag>IK</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[搜索引擎 ElasticSearch - 构建自己的 HanLP 中文分词插件]]></title>
    <url>%2F2017%2F05%2F27%2F%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E-elasticsearch-%E6%9E%84%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84-hanlp-%E4%B8%AD%E6%96%87%E5%88%86%E8%AF%8D%E6%8F%92%E4%BB%B6%2F</url>
    <content type="text"></content>
      <categories>
        <category>ElasticSearch</category>
      </categories>
      <tags>
        <tag>搜索引擎</tag>
        <tag>ElasticSearch</tag>
        <tag>HanLP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[搜索引擎 ElasticSearch - 搜索建议的实现]]></title>
    <url>%2F2017%2F05%2F27%2F%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E-elasticsearch-%E6%90%9C%E7%B4%A2%E5%BB%BA%E8%AE%AE%E7%9A%84%E5%AE%9E%E7%8E%B0%2F</url>
    <content type="text"></content>
      <categories>
        <category>ElasticSearch</category>
      </categories>
      <tags>
        <tag>搜索引擎</tag>
        <tag>ElasticSearch</tag>
        <tag>搜索建议</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[搜索引擎 ElasticSearch - 同义词方案]]></title>
    <url>%2F2017%2F05%2F27%2F%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E-elasticsearch-%E5%90%8C%E4%B9%89%E8%AF%8D%E6%96%B9%E6%A1%88%2F</url>
    <content type="text"></content>
      <categories>
        <category>ElasticSearch</category>
      </categories>
      <tags>
        <tag>搜索引擎</tag>
        <tag>ElasticSearch</tag>
        <tag>同义词</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[搜索引擎 ElasticSearch - 如何搭配使用 IK 和 HanLP]]></title>
    <url>%2F2017%2F05%2F27%2F%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E-elasticsearch-%E5%A6%82%E4%BD%95%E6%90%AD%E9%85%8D%E4%BD%BF%E7%94%A8-ik-%E5%92%8C-hanlp%2F</url>
    <content type="text"></content>
      <categories>
        <category>ElasticSearch</category>
        <category>NLP</category>
      </categories>
      <tags>
        <tag>搜索引擎</tag>
        <tag>ElasticSearch</tag>
        <tag>IK</tag>
        <tag>HanLP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[让你的服务器更安全 - 初始化服务器配置]]></title>
    <url>%2F2017%2F05%2F20%2F%E8%AE%A9%E4%BD%A0%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9B%B4%E5%AE%89%E5%85%A8-%E5%88%9D%E5%A7%8B%E5%8C%96%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[当你创建或购买了了一个新的的服务器的时候，有一些必要的步骤作来配置你的服务器，比如：root 用户权限过大问题、SSH 安全连接问题等等、使用虚拟内存等等。这将增加您的服务器的安全性和可用性，并将为后续行动提供坚实的基础。 下面我将会解释如何在 Ubuntu 14.04 中使用做一些安全性基本配置。 ¶创建用户 ¶使用 Root 用户登录 ¶创建一个新用户 ¶赋予 Root 权限 ¶禁用 Root 用户 ¶添加公钥认证 ¶配置时区和 NTP ¶创建虚拟内存 ¶配置时区和 NTP ¶配置防火墙 配置防火墙是提高服务器安全方面很重要的一部分，他可以有限提高你的服务器的安全性和可用性，具体配置可以参考 让你的服务器更安全 - 使用 UFW 开启防火墙]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Security</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[让你的服务器更安全 - 使用 UFW 开启防火墙]]></title>
    <url>%2F2017%2F05%2F20%2F%E8%AE%A9%E4%BD%A0%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9B%B4%E5%AE%89%E5%85%A8-%E4%BD%BF%E7%94%A8-UFW-%E5%BC%80%E5%90%AF%E9%98%B2%E7%81%AB%E5%A2%99%2F</url>
    <content type="text"><![CDATA[UFW(Uncomplicated Firewall) 是一个非常容易上手的 iptables 类防火墙配置工具，这个工具可以对出入服务的网络数据进行分割、过滤、转发等等细微的控制，进而实现诸如防火墙、 NAT 等功能。它简化了 iptable 那复杂的配置过程。我们都知道 iptable 非常强大、灵活，但是对于初学者来学习如何使用它正确的配置防火墙是比较难的，但是你又想保护你的网络，UFW 将会是你最好的选择。 下面我将会解释如何在 Ubuntu 14.04 中使用 UFW 安装、配置防火墙。 ¶使用前提 在你使用这片教材之前，我希望你有一个独立的 no-root 超级管理员用户 - 拥有 root 的所有权限。你可以查看我这篇文章 让你的服务器更安全 - 初始化服务器配置 中创建用户相关步骤。 一般来说 UFW 是默认会被安装的，假如你的系统中没有安装，你可以使用 apt-get 来安装。 1$ sudo apt-get install ufw ¶使用 IPv6 如果你的 Ubuntu 服务器已启用 IPv6，为了确保 UFW 能支持 IPv6 协议。 打开 UFW 的相关配置，使用你最喜欢的编辑器，这里我使用 vim ： 1$ vim /etc/default/ufw 然后，确认 IPv6 是否设置成 yes，如果没有则设置为 yes，大致如下： 123...IPV6=yes... 退出并保存，当 UFW 开启时，它将会同时支持 IPv4 和 IPv6 的配置规则。 ¶查看 UFW 状态和配置规则 在任何时间，你都可以检查它的状态和配置规则，如下： 1$ sudo ufw status verbose 默认情况下，UFW 并没有开启，它将会输出如下结果： 12# Output:Status: inactive 假如你已经开启了防火墙，它将会输出状态为 active，并列出你所配置的规则。例如：你允许来自任何地方的 SSH 连接，将将会输出如下结果： 123456789# OutputStatus: activeLogging: on (low)Default: deny (incoming), allow (outgoing), disabled (routed)New profiles: skipTo Action From-- ------ ----22/tcp ALLOW IN Anywhere 像这样通过 status 就可以检查你的防火墙状态和配置了。 注意：在开启防火墙之前，你需要确保你允许了 SSH 连接，否则当你关闭远程连接后，你就无法再连上了。博主自己就曾用这招坑了自己！ ¶设置默认规则 当你需要开始配置你的防火墙规则时，首先，你需要设置默认规则：拒绝所有流入连接，允许流出连接。意思是，不允许任何人连接你的主机，允许主机内的任何应用访问外部网络。 12$ sudo ufw default deny incoming$ sudo ufw default allow outgoing ¶开启 SSH 连接 上面我们已经设置了默认不接受任何外来连接，同样也包括了 SSH 使用的 22 端口。所以，为了我们能通过 SSH 来操作主机，所以我们需要配置允许 SSH 连接到我们的主机上。 通过如下命令来配置： 1$ sudo ufw allow ssh 这个配置将会允许所有 22 端口上的连接，默认 22 端口是被 SSH 监听的。UFW 知道什么是 ssh，因为它在 /etc/services 中已经被定义好了。 当然我们也可以指定允许 22 端口的所有连接： 1$ sudo ufw allow 22 这个和上面一个命令的作用是一样的。 ¶开启 UFW 上面已经允许 SSH 连接，我们就可以放心的开启防火墙了，使用如下命令： 1$ sudo ufw enable 在这个过程中，你将会收到一条警告信息（command may disrupt existing ssh connections.），需要你手动确认，输入 y 按回车即可。 太棒了，我们已经开启了防火墙，你可以再一次通过 sudo ufw status verbose 来查看。 ¶配置其他规则 ¶HTTP/HTTPS 当我们部署 WEB 引用服务器时，我们需要使用 80 或 443 端口来接受请求，这是我们需要开启这两个端口，操作如下： 12$ sudo ufw allow http$ sudo ufw allow https 或者，你可以指定端口： 12$ sudo ufw allow 80$ sudo ufw allow 443 ¶FTP FTP 连接一般用于非加密文件传输，它默认监听 21 端口，也许你永远都不会用到。 1$ sudo ufw allow ftp 或者，你可以指定端口： 1$ sudo ufw allow 21/tcp ¶指定端口范围 你可以指定一个端口范围，来配置防火墙策略，当有些服务需要使用多个端口时，这个就起到了作用。 如，为了允许所有 X11 连接，他们使用的端口范围是 6000 ~ 6007，你可以这样配置： 12$ sudo ufw allow 6000:6007/tcp$ sudo ufw allow 6000:6007/udp 指定端口范围时，你必须指定协议类型（TCP 或 UDP）。 ¶指定 IP 地址 使用 UFW 工作的时候，你可以指定 IP 地址，例如：假如你想允许来自某一个 IP 所有连接，你可以指定 from 这个 IP 地址。 1$ sudo ufw allow from 192.168.66.213 上面的配置将会允许 192.168.66.213 连接到我们主机的任何开放了的端口。 我们还可以指定只允许某个 IP 到主机某一个端口的连接，拒绝某个 IP 到主机其他所有端口的连接，我们可以这样做： 1$ sudo ufw allow from 192.168.66.213 to any port 80 上面配置中，我们只允许 192.168.66.213 连接到我们的 80 端口。 ¶配置子网 当你需要允许子网内所有的 IP，你可以 CIDR 的格式来配置，例如：当你需要允许 IP 地址从 192.168.1.1 到 192.168.1.254 内所有 IP 的连接时，你可以这样配置： 1$ sudo ufw allow from 192.168.1.1/24 当然，像上面一样，我们也可以同时指定端口号： 1$ sudo ufw allow from 192.168.1.1/24 to any port 22 上面配置中，我们允许 192.168.1.1/24 内的所有主机通过 SSH 连接我们的主机。 ¶指定网络接口 如果您想创建只适用于特定网络接口的防火墙规则，您可以通过指定 allow in on 加上网络接口的名称 来配置规则。 在配置之前你可以先查找所有的网络接口，再配置： 1$ ip addr 123456# Output Excerpt:...2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state...3: eth1: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc noop state DOWN group default ... 上面列举了网络接口的一些信息，他们通常叫做 eth0 或 eth1 之类的名字。 假如你的 eth0 为公网地址，你同事需要向外开放 80 端口，你可以如下操作： 1$ sudo ufw allow in on eth0 to any port 80 上面配置中，你的服务器将会接受来自于公网的 HTTP 请求。 另外，假如你想你的 MySQL 服务器（监听 3306）只接受通过内网网卡 eth1 的请求，你可以这样： 1$ sudo ufw allow in on eth1 to any port 3306 如上配置中，只有在用一个内网中的服务器才能连接你的 MySQL 服务器。 ¶添加拒绝连接规则 假如你没有修改过我们上面设置过的默认规则，它将会拒绝所有的外来连接，通常情况下，这样大大的简化了你配置一系列的防火墙规则，比如要求你创建指定端口啊，指定 IP 啊等等。但是，如果你想拒绝某个 IP 源或者某个网段的特定连接；也许你知道攻击源就来自于某个 IP 或某个网段；再者，你想把默认外接规则(incomming rule) 设置为 allow，这是你就需要指定某些拒绝规则了。 配置 拒绝规则 ，更我们上面配置 允许规则 是一样的方式，只不过将 allow 改为 deny。 如：拒绝所有 HTTP 连接，即：拒绝所有连接 80 端口。 1sudo ufw deny http 当然，也可以指定端口号： 1sudo ufw deny 80 拒绝某一个 192.168.1.10 通过 SSH 连接到我们的主机上： 1$ sudo ufw deny from 192.168.1.10 to any port 22 如果你想书写更多的 拒绝规则 ，请参考之前描述的 允许规则 书写方式，将 allow 改为 deny 即可。 现在我们知道如何添加 允许规则 和 拒绝规则，但是我们还不知道如何删除规则，没关系，我们再往下看。 ¶删除规则 众所周知，如何删除一条防火墙规则和如何创建一条防火墙规则一样重要，UFW 提供了两种路径删除他们： 通过规则序号来删除 通过实际规则来删除 ¶指定规则序号删除 每一个规则在创建时都会分配一个序号，你可以将它理解为数据库的自增 ID 吧，可以通过他来进行更方便的操作，你可以通过如下方式查看序号： 1sudo ufw status numbered 1234567Numbered Output:Status: active To Action From -- ------ ----[ 1] 22 ALLOW IN 15.15.15.0/24[ 2] 80 ALLOW IN Anywhere 假如你想删除第 2 条规则，拒绝所有指向 80 端口的连接，如下操作： 1$ sudo ufw delete 2 注意：如果你启用了 IPv6 规则，这同时也将删除相应的 IPv6 规则。 ¶指定实际规则删除 如果你不想通过 规则序号 来删除，你可以指定 创建时的参数格式 来删除，例如：当你使用 sudo ufw allow http 创建的规则时，你可以通过如下方式删除： 1$ sudo ufw delete allow http 同样你可以指定端口号来替代服务名： 1$ sudo ufw delete allow 80 注意：这种方式将会同时删除相应的 IPv4 和 IPv6规则。 ¶关闭 UFW 现在，由于某些我们不想开启防火墙了，我们可以关闭它： 1$ sudo ufw disable ¶重置 UFW 的配置 将入你配置了好多规则，但是你现在需要重新配置，抛弃之前的配置规则，你可以这么做： 1$ sudo ufw reset 这个命令将会删除你之前配置的所有规则，但是默认规则将会被保留。 ¶总结 服务器安全一直都是一个重要的话题，开启防火墙使我们保护服务器安全的重要手段之一，所以，无论什么情况下，我们都应该为服务器开启防火墙。当然，开放 SSH 也是必不可少的，与此同时，你可以允许一些连接到您的服务器，同时并限制一些不必要的连接，这样您的服务器才会更加的安全的提供服务。 想了解更多的 UFW 防火墙配置，你可以参考这篇文章：UFW Essentials: Common Firewall Rules and Commands]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Firewall</tag>
        <tag>Security</tag>
        <tag>UFW</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Redis 基础之命令详解]]></title>
    <url>%2F2017%2F05%2F20%2FRedis-%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3%2F</url>
    <content type="text"></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
</search>